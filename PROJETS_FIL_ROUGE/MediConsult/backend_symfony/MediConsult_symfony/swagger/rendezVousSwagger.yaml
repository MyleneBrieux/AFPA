openapi: 3.0.0
info:
  title: 'Patient Management'
  description: 'Patient Management'
  version: V1
paths:
  '/patients/specialistes/{id}':
    get:
      tags:
        - Patient
      summary: 'Find specialistes saw by a patient'
      description: 'Return a list of specialistes saw by a patient '
      operationId: 'App\Controller\PatientRestController::searchAllSpecialistes'
      parameters:
        -
          name: id
          in: path
          description: 'The specialiste''s id'
          required: true
          schema:
            type: number
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDTO'
        '404':
          description: 'Specialiste not found'
        '500':
          description: 'Internal server Error. Please contact us'
  '/patients/{id}':
    get:
      tags:
        - Patient
      summary: 'Search Patient by id'
      description: 'Search Patient by id'
      operationId: 'App\Controller\PatientRestController::searchById'
      parameters:
        -
          name: id
          in: path
          description: 'ID of patient that needs to be fetched'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDTO'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Patient not found'
    put:
      tags:
        - Patient
      summary: 'Update a patient'
      description: 'Update a patient'
      operationId: 'App\Controller\PatientRestController::update'
      parameters:
        -
          name: id
          in: path
          description: 'ID of the patient to be updated'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Updated patient object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientDTO'
      responses:
        '404':
          description: 'Patient not found'
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDTO'
    delete:
      tags:
        - Patient
      summary: 'Delete patient by ID'
      description: 'Delete patient by ID'
      operationId: 'App\Controller\PatientRestController::remove'
      parameters:
        -
          name: id
          in: path
          description: 'ID of the patient that needs to be deleted'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Patient not found'
  /patients:
    post:
      tags:
        - Patient
      summary: 'Create a new PatientDTO'
      description: 'Create a new PatientDTO'
      operationId: 'App\Controller\PatientRestController::create'
      requestBody:
        description: 'PatientDTO JSON Object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientDTO'
      responses:
        '405':
          description: 'Invalid input'
        '201':
          description: 'Patient inserted successfully'
  '/patients/{nom}':
    get:
      tags:
        - Patient
      summary: 'Search Patient by nom'
      description: 'Search Patient by nom'
      operationId: 'App\Controller\PatientRestController::searchByNom'
      parameters:
        -
          name: nom
          in: path
          description: 'Name of patient that needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDTO'
        '400':
          description: 'Invalid name supplied'
        '404':
          description: 'Patient not found'
  '/patients/rendezvous/{id}':
    get:
      tags:
        - Patient
      summary: 'Find rendez-vous of a patient'
      description: 'Return a list of rendez-vous of a patient '
      operationId: 'App\Controller\PatientRestController::searchAllRendezVous'
      parameters:
        -
          name: id
          in: path
          description: 'The patient''s id'
          required: true
          schema:
            type: number
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDTO'
        '404':
          description: 'Patient not found'
        '500':
          description: 'Internal server Error. Please contact us'
  '/rendezvous/{id}':
    get:
      tags:
        - RendezVous
      summary: 'Search rendezVous by id'
      description: 'Search rendezVous by id'
      operationId: 'App\Controller\RendezVousRestController::searchById'
      parameters:
        -
          name: id
          in: path
          description: 'ID of rendezVous that needs to be fetched'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RendezVousDTO'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'RendezVous not found'
    put:
      tags:
        - RendezVous
      summary: 'Update a rendezVous'
      description: 'Update a rendezVous'
      operationId: 'App\Controller\RendezVousRestController::update'
      parameters:
        -
          name: id
          in: path
          description: 'ID of the rendezVous to be updated'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Updated rendezVous object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RendezVousDTO'
      responses:
        '404':
          description: 'RendezVous not found'
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RendezVousDTO'
    delete:
      tags:
        - RendezVous
      summary: 'Delete rendezVous by ID'
      description: 'Delete rendezVous by ID'
      operationId: 'App\Controller\RendezVousRestController::remove'
      parameters:
        -
          name: id
          in: path
          description: 'ID of the rendezVous that needs to be deleted'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'RendezVous not found'
  /rendezvous:
    post:
      tags:
        - RendezVous
      summary: 'Create a new RendezVousDTO'
      description: 'Create a new RendezVousDTO'
      operationId: 'App\Controller\RendezVousRestController::create'
      requestBody:
        description: 'RendezVousDTO JSON Object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RendezVousDTO'
      responses:
        '405':
          description: 'Invalid input'
        '201':
          description: 'RendezVous inserted successfully'
  /specialistes:
    get:
      tags:
        - Specialiste
      summary: 'Returns a list of SpecialisteDTO'
      description: 'Returns a list of SpecialisteDTO'
      operationId: 'App\Controller\SpecialisteRestController::searchAll'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialisteDTO'
        '404':
          description: 'If no SpecialisteDTO found'
        '500':
          description: 'Internal server Error. Please contact us'
    post:
      tags:
        - Specialiste
      summary: 'Create a new SpecialisteDTO'
      description: 'Create a new SpecialisteDTO'
      operationId: 'App\Controller\SpecialisteRestController::create'
      requestBody:
        description: 'SpecialisteDTO JSON Object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialisteDTO'
      responses:
        '405':
          description: 'Invalid input'
        '201':
          description: 'Specialiste inserted successfully'
  '/specialistes/{id}':
    get:
      tags:
        - Specialiste
      summary: 'Search Specialiste by id'
      description: 'Search Specialiste by id'
      operationId: 'App\Controller\SpecialisteRestController::searchById'
      parameters:
        -
          name: id
          in: path
          description: 'ID of specialiste that needs to be fetched'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialisteDTO'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Specialiste not found'
    put:
      tags:
        - Specialiste
      summary: 'Update a specialiste'
      description: 'Update a specialiste'
      operationId: 'App\Controller\SpecialisteRestController::update'
      parameters:
        -
          name: id
          in: path
          description: 'ID of the specialiste to be updated'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Updated specialiste object'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialisteDTO'
      responses:
        '404':
          description: 'Specialiste not found'
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialisteDTO'
    delete:
      tags:
        - Specialiste
      summary: 'Delete specialiste by ID'
      description: 'Delete specialiste by ID'
      operationId: 'App\Controller\SpecialisteRestController::remove'
      parameters:
        -
          name: id
          in: path
          description: 'ID of the specialiste that needs to be deleted'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Specialiste not found'
  '/specialistes/{specialite}':
    get:
      tags:
        - Specialiste
      summary: 'Search Specialiste by specialite'
      description: 'Search Specialiste by specialite'
      operationId: 'App\Controller\SpecialisteRestController::searchSpecialistesBySpecialite'
      parameters:
        -
          name: specialite
          in: path
          description: 'Group specialistes by specialite'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialisteDTO'
        '400':
          description: 'Invalid specialite supplied'
        '404':
          description: 'Specialiste not found'
  '/specialistes/patients/{id}':
    get:
      tags:
        - Specialiste
      summary: 'Return a list of patients for a specialiste'
      description: 'Return a list of patients for a specialiste'
      operationId: 'App\Controller\SpecialisteRestController::searchAllPatients'
      parameters:
        -
          name: id
          in: path
          description: 'The specialiste''s id for who we search the patients'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialisteDTO'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Specialiste not found'
  '/specialistes/rendezvous/{id}':
    get:
      tags:
        - Specialiste
      summary: 'Find rendez-vous of a specialiste'
      description: 'Return a list of rendez-vous of a specialiste'
      operationId: 'App\Controller\SpecialisteRestController::searchAllRendezVous'
      parameters:
        -
          name: id
          in: path
          description: 'The specialiste''s id'
          required: true
          schema:
            type: number
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialisteDTO'
        '404':
          description: 'Specialiste not found'
        '500':
          description: 'Internal server Error. Please contact us'
components:
  schemas:
    PatientDTO:
      properties:
        id:
          type: integer
        nom:
          type: string
        prenom:
          type: string
        age:
          type: integer
      type: object
    RendezVousDTO:
      properties:
        id:
          type: integer
        date:
          type: string
        horaire:
          type: string
        patient:
          type: integer
        specialiste:
          type: integer
      type: object
    SpecialisteDTO:
      properties:
        id:
          type: integer
        nom:
          type: string
        prenom:
          type: string
        adresse:
          type: string
        specialite:
          type: string
      type: object
